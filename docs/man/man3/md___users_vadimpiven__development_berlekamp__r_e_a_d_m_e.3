.TH "md___users_vadimpiven__development_berlekamp__r_e_a_d_m_e" 3 "Пт 4 Окт 2019" "Version 1.0.0" "irrpolygf2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md___users_vadimpiven__development_berlekamp__r_e_a_d_m_e \- Генератор неприводимых многочленов над полем GF[2] (степени от 1 до 63) 
Данная программа реализует алгоритм Берлекампа проверки неприводимости многочленов\&. Получение неприводимого многочлена выполняется путём генерации случайных многочленов с последующей проверкой их на неприводимость\&. Первый же найденный неприводимый многочлен возвращается\&.
.SH "Ограничения"
.PP
Программа будет работать только на компьютерах с архитектурой AMD64 и ARM64 (т\&.к\&. требуется поддержка 64-битных чиесл)\&. Компиляция возможна только с помощью GCC или Clang (т\&.к\&. используется макрос \fC__builtin_clzll\fP) с поддержкой C++ 17\&. Также необходимо наличие библиотеки POSIX Threads (т\&.к\&. на её основе выполняется распараллеливание генератора)\&. Для компиляции желательно наличие Cmake (т\&.к\&. проект удобнее всего собирать именно с помощью него)\&.
.SH "Использование"
.PP
Необходимо подключить \fC#include 'Generator\&.hpp'\fP и вызвать \fCGenerator::GetIrrPoly(degree)\fP, где \fCdegree\fP – степень требуемого неприводимого многочлена (от 1 до 63)\&. Результирующий многочлен имеет тип \fCuint_fast64_t\fP, т\&.е\&. представлен 64-битным числом\&. В этом числе каждый бит содержит значение коэффициента многочлена при соответствующей номеру бита степени \fCx\fP\&. Например многочлен \fCP2 = x^2 + 1\fP будет представлен числом \fC0b0\&.\&.\&.0101\fP\&.
.PP
Если требуется проверка отдельно взятого многочлена на неприводимость необходимо подключить \fC#include \fBPolynomial\&.hpp\fP\fP и вызвать \fC\fBPolynomial(p)\fP\&.IsIrredusible()\fP, где \fCp\fP - число типа \fCuint_fast64_t\fP, кодирующее проверяемый многочлен\&. В результате вернётся булевое значение, говорящее о приводимости (\fCfalse\fP) или неприводимости (\fCtrue\fP) данного многочлена\&. Проверка отдельных многочленов выполняется в один поток, таки образом она не требует наличия библиотеки POSIX Threads, остальные ограничения сохраняются\&.
.PP
Для компиляции готового кода при наличии установленных \fCmake\fP и \fCcmake\fP достаточно выполнить \fCmake debug\fP или \fCmake release\fP в корневой папке проекта для получения и запуска соответствующей сборки\&.
.SH "Документация"
.PP
Документация кода программы сгенерирована с помощью Doxygen и может быть найдена в папке [docs](docs) или на соответствующей странице \fCGitHub Pages\fP\&. Незадукомментированные возможности:
.IP "\(bu" 2
в файле \fCmain\&.cpp\fP находится код приведённого ниже бенчмарка, для его активации необходимо дописать \fC#define TIMINGS\fP в начале файла\&.
.IP "\(bu" 2
если перед подключением \fC#include 'Random\&.hpp'\fP в файле \fC\fBGenerator\&.cpp\fP\fP добавить \fC#define PARFENOV_PLEASE\fP, то вместо генератора псевдослучайных чисел из стандартной библиотеки будет использоваться генератор, реализованный самостоятельно\&. Этот генератор точно перебирает все числа, имеющиее число значащих бит не более требуемого\&. Тем не менее, начальным значением всегда является \fC1\fP, таким образом при каждом запуске генератор будет возвращать одну и ту же последовательность\&.
.PP
.PP
Для обновления документации при наличии установленных \fCmake\fP и \fCdoxygen\fP достаточно выполнить \fCmake docs\fP в корневой папке проекта\&.
.SH "Бенчмарк"
.PP
Для тестирования скорости работы программы был выполнен запуск проверки всех многочленов заданной степени на неприводимость\&. (Проверялись только многочлены, старший и младший коэффициенты которых отличны от нуля, т\&.к\&. остальные многочлены очевидно приводимы)\&. Проверка выполнялась в одном потоке на компьютере с CPU Intel Core i7 2\&.6 Ghz и RAM 16 GB 2133 MHz LPDDR3\&. Были выполнениы расчёты для степеней от 2 до 33 включительно\&. Результаты бенчмарка можно найти в файле \fCtimings\&.txt\fP\&. Результаты представлены в следующем виде: 
.PP
.nf
deg: степень проверяемых многочленов
num: число найденных неприводимых многочленов данной степени
mic: общее время выполнения проверки в микросекундах
mil: общее время выполнения проверки в миллисекундах
sec: общее время выполнения проверки в секундах
min: общее время выполнения проверки в минутах
hou: общее время выполнения проверки в часах

.fi
.PP
 Следует отметить, что результаты проверки многочленов до 11 степени совпадают с таблицей многочленов, приведённой в двухтомнике 'Конечные поля' авторов Лидл Р\&., Нидеррайтер Г\&. Результаты для более высоких степеней проверялись выборочно\&. В результате проверок ошибок в работе алгоритма найдено не было\&.
.SH "Отказ от ответственности"
.PP
Код программы создан на основе \fCранее выполненной реализации\fP, а также статьи 'A Formalization of Berlekamp’s Factorization Algorithm' авторов Jose Divason, Sebastiaan Joosten, Rene Thiemann, Akihisa Yamada\&. В реализации могут (с очень малой вероятностью) присутствовать ошибки\&. Тем не менее, данное программное обеспечение распространяется под лицензией MIT, поэтому автор не несёт ответственности за возможные ошибки и их последствия, а также не планирует их самостоятельного исправления\&. 
