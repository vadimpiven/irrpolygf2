.TH "Polynomial" 3 "Пт 4 Окт 2019" "Version 1.0.0" "irrpolygf2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Polynomial
.SH SYNOPSIS
.br
.PP
.SS "Открытые члены"

.in +1c
.ti -1c
.RI "\fBPolynomial\fP (uint_fast64_t) noexcept"
.br
.ti -1c
.RI "bool \fBIsIrredusible\fP (uint_fast8_t) const noexcept"
.br
.ti -1c
.RI "uint_fast64_t \fBGet\fP () const noexcept"
.br
.in -1c
.SH "Конструктор(ы)"
.PP 
.SS "Polynomial::Polynomial (uint_fast64_t val)\fC [explicit]\fP, \fC [noexcept]\fP"
Создаёт новый многочлен над полем GF[2^n], n = 0,\&.\&.\&.,63\&. 
.PP
\fBАргументы\fP
.RS 4
\fIval\fP представляет многочлен как 64-битное целое число, где представлению P(x) = a + b*x + c*x^2 соответствует число с побитовым представлением \&.\&.\&.cba, здесь a, b, c = 0 или 1, т\&.к\&. коэффициенты многочлена лежат в поле GF[2]\&. 
.RE
.PP

.SH "Методы"
.PP 
.SS "uint_fast64_t Polynomial::Get () const\fC [noexcept]\fP"

.PP
\fBВозвращает\fP
.RS 4
текущий многочлен, представленный как 64-битное целое число\&. 
.RE
.PP

.SS "bool Polynomial::IsIrredusible (uint_fast8_t degree) const\fC [noexcept]\fP"
Определяет, является ли данный многочлен степени n неприводимым в поле GF[2]\&. Для определения неприводимости используется алгоритм Берлекампа\&. Первый шаг - вычисление производной данного многочлена\&. Если производная равна нулю, то многочлен является степенью какого-то другого многочлена, то есть он приводим\&. Второй шаг - поиск общих множителей многочлена и его производной\&. Если общие множители (многочлены, а не числа) есть, т\&.е\&. многочлены не взаимно просты, то f(x) делится на них, т\&.е\&. он не неприводим\&. Третий шаг - простоение матрицы Берлекампа и вычисление её ранга\&. 
.PP
\fBАргументы\fP
.RS 4
\fIdegree\fP степень текущего многочлена, от 1 до 63, не проверяется корректность для уменьшания числа выполняемых операций\&. 
.RE
.PP
\fBВозвращает\fP
.RS 4
является ли данный многочлен степени n неприводимы над полем GF[2]\&. 
.RE
.PP


.SH "Автор"
.PP 
Автоматически создано Doxygen для irrpolygf2 из исходного текста\&.
